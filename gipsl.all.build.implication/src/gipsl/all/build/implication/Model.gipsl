package "gipsl.all.build.implication"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

//
// GIPSL starts here!
//

mapping n2n to mapVnode;

// Implication
constraint with SubstrateResourceNode {
	mappings.n2n->filter(element.nodes.snode == context)->count() <= 1 =>
	mappings.n2n->filter(element.nodes.snode == context)->count() >= 2
	// 1 => 1 = 1
	// 1 => 0 = 0
	// 0 => 1 = 1
	// 0 => 0 = 1
}

//constraint -> global {
//	1 == 1 => 1 == 1
//}

function nObj with n2n {
	1
}

objective : max {
	functions.nObj
}
