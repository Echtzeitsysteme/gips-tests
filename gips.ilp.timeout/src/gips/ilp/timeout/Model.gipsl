package "gips.ilp.timeout"
import "platform:/resource/gips.ilp.timeout.timeoutmodel/model/Timeoutmodel.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 0.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

condition srcNotMapped = forbid srcIsMapped
pattern srcIsMapped {
	trg: Target
	
	src: Source {
		-host -> trg
	}
}

rule mapSrc {
	root: Root {
		-elements -> src
		-elements -> trg
	}
	
	src: Source {
		++ -host -> trg
	}
	
	trg: Target {
		++ -srcs -> src
		.free := trg.free - src.val
	}
	
	# src.val <= trg.free
	# trg.free > 0
	# trg.val > 0
}
when srcNotMapped

//
// GIPSL starts here!
//

mapping s2t to mapSrc; 

constraint with mapSrc {
	mappings.s2t->filter(element.nodes.src == context.nodes.src)->count() == 1
}

constraint with Target {
	mappings.s2t->filter(element.nodes.trg == context)->sum(element.nodes.src.val) <= context.free
}

// The following constraint is redundant to the first one (if a non incremental run is archieved)
constraint with Source {
	mappings.s2t->filter(element.nodes.src == context)->count() == 1
}

function o with s2t {
	1
}

objective : min {
	functions.o
}
