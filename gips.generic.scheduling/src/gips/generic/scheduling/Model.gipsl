package "gipsl.generic.scheduling"
import "platform:/resource/gips.scheduling.taskmodel/model/Taskmodel.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 60.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule runTaskInSlot {
	root: Root {
		-tasks -> t
		-slots -> s
	}
	
	t: Task {
		++ -runningon -> s
	}
	
	s: Slot
	
	# t.^deadline >= s.^index
}

mapping t2s to runTaskInSlot;  

// Every task must be mapped n times (according to its duration)
constraint with Task {
	mappings.t2s->filter(element.nodes.t == context)->sum(element.value) == context.duration     
}

// There must be at most one mapping per slot
constraint with Slot {
	mappings.t2s->filter(element.nodes.s == context)->sum(element.value) <= 1
}

// No objective on purpose
// this is the *generic* scheduling solution without any goal besides "find a valid solution"
