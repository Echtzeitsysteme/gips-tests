package "gipsl.all.build.resourceinit.infthenopt"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

//
// GIPSL starts here!
//

mapping n2n to mapVnode;

// Exactly one mapping per virtual resource node
constraint with VirtualResourceNode {
	mappings.n2n->filter(element.nodes.vnode == context)->count() == 1
}

// This constraint is the key of this project:
// It can easily be infeasible but this can not be shown by the validation log!
constraint with SubstrateResourceNode {
	mappings.n2n->filter(element.nodes.snode == context)->sum(element.nodes.vnode.resourceDemand) <= context.resourceAmountAvailable
}

function nObj with n2n {
	1
}

objective : max {
	functions.nObj
}
