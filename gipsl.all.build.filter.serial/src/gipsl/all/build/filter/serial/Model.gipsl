package "gipsl.all.build.filter.serial"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode {
		++ -guests -> vnode
	}
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
}

//
// GIPSL starts here!
//

mapping n2n with mapVnode;

constraint -> pattern::mapVnode {
	mappings.n2n
	->filter(m | m.nodes().vnode == self.nodes().vnode)
	->filter(m | m.nodes().snode == self.nodes().snode)
	->count() == 1 
}

constraint -> global {
	mappings.n2n
	->filter(m | m.nodes().vnode.resourceDemand == 0)
	->filter(m | m.nodes().snode.resourceAmountTotal == 0)
	->count() == 0
}

objective o -> mapping::n2n {
	1
}

global objective : min {
	o
}