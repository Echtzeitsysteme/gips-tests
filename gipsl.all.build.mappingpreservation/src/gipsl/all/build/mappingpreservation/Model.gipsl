package "gipsl.all.build.mappingpreservation"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "TODO"];
	timeLimit := true [value := 5.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

condition vnodeNotMapped = forbid vnodeIsMapped
pattern vnodeIsMapped {
	host: SubstrateNode
	
	vnode: VirtualNode {
		-host -> host
	}
}

pattern vnodeNotMapped {
	vnode: VirtualNode
}
when vnodeNotMapped

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
		
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand != 10
}

rule mapVnodeWith10ResDem {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
		
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 10
}

//
// GIPSL starts here!
//

mapping n2n to mapVnode;
mapping resDem to mapVnodeWith10ResDem;

// At most one mapping per virtual node is allowed
constraint with VirtualNode {
	mappings.n2n->filter(element.nodes.vnode == context)->sum(element.value) <= 1
}

constraint with VirtualNode {
	mappings.resDem->filter(element.nodes.vnode == context)->sum(element.value) <= 1
}

// Cost = 1 per mapped virtual node
function maps with n2n {
	context.value
}

function map10ResDem with resDem {
	context.value
}

objective : max {
	functions.maps + functions.map10ResDem
}
