package "gipsl.all.build.notequal"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GLPK [home:="fu", license:="bar"];
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode {
		++ -guests -> vnode
	}
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

//
// GIPSL starts here!
//

mapping n2n with mapVnode;

// NOT ...->count() == 1
//constraint -> class::SubstrateResourceNode {
//	!mappings.n2n->filter(m | m.nodes().snode == self)->count() == 1
//}
constraint -> class::SubstrateResourceNode {
	mappings.n2n->filter(m | m.nodes().snode == self)->count() != 1
}

objective nObj -> mapping::n2n {
	1
}

global objective : max {
	nObj
}
