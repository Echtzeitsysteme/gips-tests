package "gipsl"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "TODO"];
	timeLimit := true [value := 42.0];
	randomSeed := true [value := 73];
	presolve := true;
	debugOutput := true;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode {
		++ -guests -> vnode
	}
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

//
// GIPSL starts here!
//

mapping n2n with mapVnode;

// XOR
constraint -> class::SubstrateResourceNode {
	// The `filter` operation on the first half of the expression is useless but necessary because of the `self` reference
	// The second possibility could be true but the goal is to maximize the number of mappings according to the objective function.
	mappings.n2n->filter(m | m.nodes().snode == self)->count() <= 1 ^ mappings.n2n->filter(m | m.nodes().snode == self)->count() <= 0
}

objective nObj -> mapping::n2n {
	1
}

global objective : max {
	nObj
}
