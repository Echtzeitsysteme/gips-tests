package "gipsl.all.build.vardoubleimpl"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	// Explicitly no constraints
//	# vnode.resourceDemand <= snode.resourceAmountAvailable
//	# snode.resourceAmountAvailable >= 0
}

//
// GIPSL starts here!
//

mapping n2n to mapVnode {
	var v : EInt
};

// Explicitly no constraint that enforces the mappings
//constraint -> class::VirtualResourceNode {
//	mappings.n2n->filter(m | m.nodes().vnode == context)->count() == 1
//}

// Enforce the pattern constraints by ILP
constraint with SubstrateResourceNode {
	mappings.n2n->filter(element.nodes.snode == context)->sum(element.nodes.vnode.resourceDemand) <= context.resourceAmountAvailable
}

// Attach the free variable (v) to the mapping variable
constraint  with n2n {
	[context.variables.v >= 1 => context.value >= 1] &
	[context.value >= 1 => context.variables.v >= 1]
}

// Limit the value of the integer variable to positive values only.
constraint  with n2n {
	context.variables.v >= 0
}

function n2nObj  with n2n {
	1
}

objective : max {
	functions.n2nObj
}
