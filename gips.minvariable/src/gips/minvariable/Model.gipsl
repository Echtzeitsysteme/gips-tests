package "gips.minvariable"
import "platform:/resource/gips.minvariablemodel/model/Minvariablemodel.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
	lpOutput := true [path := "./problem.lp"];
}

//
// GT
//

rule selectNode {
	root : Root {
		- nodess -> n
	}
	
	n : Node {
		.selected := true
	}
	
	// Omitted on purpose to also create non-selected
	// mappings in the problem.
//	# n.valueSecondary >= 1
}

// The pattern `findRoot` is another way to specify a
// global constraint. Because of a bug in the GIPSL 
// compiler, this pattern is necessary.
pattern findRoot {
	root : Root
}

pattern findSecondarySelectedNode {
	root : Root {
		- nodess -> n
	}
	
	n : Node
	
	# n.valueSecondary >= 1
}

pattern findSecondaryNotSelectedNode {
	root : Root {
		- nodess -> n
	}
	
	n : Node
	
	# n.valueSecondary == 0
}

//
// GIPSL
//

mapping select to selectNode {
	var z : EBoolean
};

mapping minimum to findRoot {
	var minimum : EInt
};

// Every matching node in the model must be selected for a mapping
constraint with findSecondarySelectedNode {
	mappings.select->filter(element.nodes.n == context.nodes.n)->sum(element.value)
	==
	1
}

// Every non-matching node in the model must *not* be selected for a mapping
constraint with findSecondaryNotSelectedNode {
	mappings.select->filter(element.nodes.n == context.nodes.n)->sum(element.value)
	==
	0
}

//// This constraint should not be necessary
//constraint with minimum {
//	context.variables.minimum >= 0
//}

//
// Min constraint is complicated
//

//// The value of Q (i.e., the minimum) must not be larger than
//// any of the selected mapping's value.
////
//// Q <= a * R_i
//constraint with select {
//	mappings.minimum->sum(element.variables.minimum)
//	<= context.nodes.n.valueConstant * context.value
//	+ 1000 * (1 - context.value)
//	// The equation above was extended by the last term (`+ 1000 * ...`)
//	// to not draw the minimum value to zero if a mapping was not selected.
//}
//
//// There must be exactly one mapping thats value is >=
//// than the found minimum value.
////
//// Q >= a * R_i - M(1 - z_i)
//constraint with select {
//	mappings.minimum->sum(element.variables.minimum)
//	>= context.nodes.n.valueConstant * context.value
//	- 1000 * (1 - context.variables.z)
//}
//
//// Only one mapping must be >= the found minimum value.
//// This constraint must only be enforced when at least
//// one of the possible mappings is selected. Otherwise,
//// the LP would be infeasible.
//// 
//// sum_i(z_i) == 1
//constraint with findRoot {
//	mappings.select->sum(element.value) >= 1
//	=>
//	mappings.select->sum(element.variables.z) == 1
//}
//
//// If there is no selected mapping at all, the found
//// minimum value must be 0 (but it could also be something
//// else if desired).
//constraint with findRoot {
//	mappings.select->sum(element.value) == 0
//	=>
//	mappings.minimum->sum(element.variables.minimum) == 0
//}
//
//// z must only be set if mapping was selected
//constraint with select {
//	context.value >= context.variables.z
//}

//
// Andys variant:
//

// für alle i aus 1 bis n:  Q <= a_i + M * (1 - x_i)
constraint with select {
	mappings.minimum->sum(element.variables.minimum)
	<= context.nodes.n.valueConstant * context.value
	+ 1000 * (1 - context.value)
}

// für alle i aus 1 bis n:  Q >= a_i – M * (1 - z_i)
constraint with select {
	mappings.minimum->sum(element.variables.minimum)
	>= context.nodes.n.valueConstant * context.value
	- 1000 * (1 - context.variables.z)
}

// für alle i aus 1 bis n:  z_i <= x_i
constraint with findRoot {
	mappings.select->sum(element.variables.z) <=
	mappings.select->sum(element.value)
}

// für alle i aus 1 bis n:  sum(z_i) = 1
constraint with findRoot {
	mappings.select->sum(element.variables.z) == 1
}

// Objective: maximize the number of selected mappings
function select with select {
	context.value
}

objective : max {
	0
	+ functions.select
}
