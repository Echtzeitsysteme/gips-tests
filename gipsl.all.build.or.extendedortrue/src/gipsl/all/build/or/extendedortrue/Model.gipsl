package "gipsl.all.build.or.extendedortrue"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "TODO"];
	timeLimit := true [value := 42.0];
	randomSeed := true [value := 73];
	presolve := true;
	debugOutput := true;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

mapping n2n with mapVnode;

constraint -> class::VirtualResourceNode {
	// Every virtual node must be mapped OR true
	mappings.n2n->filter(m | m.nodes().vnode == self)->count() >= 1 | true
}

// Helper constraint to allow ...->count() == 1 in an OR
constraint -> class::VirtualResourceNode {
	mappings.n2n->filter(m | m.nodes().vnode == self)->count() <= 1
}

objective nObj -> mapping::n2n {
	1
}

// Minimization of cost function -> No virtual node should be mapped whatsoever
global objective : min {
	nObj
}
