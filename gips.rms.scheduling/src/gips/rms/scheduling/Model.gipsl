package "gips.rms.scheduling"
import "platform:/resource/gips.scheduling.periodictaskmodel/model/Periodictaskmodel.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule runTaskInSlot {
	root: Root {
		-tasks -> t
		-slots -> s
	}
	
	t: Task {
		++ -runningon -> s
	}
	
	s: Slot
}

mapping t2s to runTaskInSlot;

// Every task must be mapped n times (according to its execution time)
constraint with Task {
	mappings.t2s->filter(element.nodes.t == context)->sum(element.value) == context.executiontime
}

// There must be at most one mapping per slot
constraint with Slot {
	mappings.t2s->filter(element.nodes.s == context)->sum(element.value) <= 1
}

// Check completion time theorem
constraint {
	types.Task->sum((1.0 * element.executiontime / element.timeperiod))
	<=
	types.Task->count() * ((2 pow (1 / types.Task->count())) - 1)	
}
