package "gipsl.all.build.objectivemapping"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GLPK [home:="fu", license:="bar"];
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode {
		++ -guests -> vnode
	}
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
}

//
// GIPSL starts here!
//

mapping a with mapVnode;
constraint -> pattern::mapVnode {
	mappings.a
		->filter(
			m | m.nodes().snode == self.nodes().snode
			& m.nodes().vnode == self.nodes().vnode
		)
		->count() == 1
}

objective localObj -> pattern::mapVnode {
	mappings.a
		->filter(
			m | m.nodes().snode == self.nodes().snode
			& m.nodes().vnode == self.nodes().vnode
		)->sum(m | m.nodes().vnode.resourceDemand)
}

global objective : min {
	localObj
}