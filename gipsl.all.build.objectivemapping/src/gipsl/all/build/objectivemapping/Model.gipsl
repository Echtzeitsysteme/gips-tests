package "gipsl.all.build.objectivemapping"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
}

rule mapVnodeTen {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 10
}

//
// GIPSL starts here!
//

mapping a to mapVnode;
mapping ten to mapVnodeTen;

//constraint with mapVnode {
//	mappings.a
//		->filter(
//			element.nodes.snode == context.nodes.snode
//			& element.nodes.vnode == context.nodes.vnode
//		)
//		->count() == 1
//}
//
//constraint with mapVnodeTen {
//	mappings.ten
//		->filter(
//			element.nodes.snode == context.nodes.snode
//			& element.nodes.vnode == context.nodes.vnode
//		)
//		->count() == 1
//}

// Exactly one mapping must be chosen
constraint with VirtualResourceNode {
		mappings.a
		->filter(element.nodes.vnode == context)
		->count()
		
		+
		
		mappings.ten
		->filter(element.nodes.vnode == context)
		->count()
		
		== 1
}

function localObj with mapVnode {
	mappings.a
		->filter(
			element.nodes.snode == context.nodes.snode
			& element.nodes.vnode == context.nodes.vnode
		)->sum(element.nodes.vnode.resourceDemand)
}

function localObjTen with mapVnodeTen {
	mappings.ten
		->filter(
			element.nodes.snode == context.nodes.snode
			& element.nodes.vnode == context.nodes.vnode
		)->count()
}

objective : min {
	functions.localObj + functions.localObjTen
}