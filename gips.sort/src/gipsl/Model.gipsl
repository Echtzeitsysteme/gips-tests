import "platform:/resource/gips.sort.listmodel/model/Listmodel.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "TODO"];
	timeLimit := true [value := 42.0];
	randomSeed := true [value := 73];
	presolve := true;
	debugOutput := true;
}

rule sortOne {
	root: Root {
		-entries -> valA
		-entries -> valB
	}
	
	valA: Entry {
		++ -next -> valB
	}
	
	valB: Entry
		
	# valA.^value <= valB.^value
}

rule sortLast {
	root: Root {
		-entries -> val
	}
	
	val: Entry {
		++ -next -> val
	}
}

//rule sortFirst () {
//	root: Root {
//		-entries -> val
//		++ -first -> val
//	}
//	
//	val: Entry
//}
//when entryIsSmallest

//condition entryIsSmallest = forbid entryNotSmallest
//pattern entryNotSmallest {
//	valA: Entry
//	valB: Entry
//	
//	# valA.^value > valB.^value
//}

mapping e2e with sortOne;
mapping e2self with sortLast;

constraint -> class::Entry {
	mappings.e2e->filter(m | m.nodes().valA == self)->count() + mappings.e2self->filter(m | m.nodes().val == self)->count() == 1
//		mappings.e2e->filter(m | m.nodes().valA == self)->count() == 1
}
constraint -> global {
	mappings.e2self->count() == 1
}
// TODO: ^ this constraint does generate A WRONG ILP CONSTRAINT: "GlobalConstraint0_0: + e2self#1 + e2e#0 = 1" (only in GLPK? WTF???)
//constraint -> class::Root {
//	mappings.e2self->count() == 1 + (self.entries->count() - self.entries->count())
//	// ^ workaround (at the end) until validation of global constraints is fixed
//}

//constraint -> class::Entry {
//	mappings.e2e->filter(m | m.nodes().valB == self)->count() + mappings.e2self->filter(m | m.nodes().val == self)->count() == 1
//}


constraint -> global {
	mappings.e2self->count() + mappings.e2e->count() == classes.Entry->count()
}

constraint -> class::Entry {
//	mappings.e2e->filter(m | m.nodes().valB == self)->count() + mappings.e2self->filter(m | m.nodes().val == self)->count() == 1
	mappings.e2e->filter(m | m.nodes().valB == self)->count() == 1
}
