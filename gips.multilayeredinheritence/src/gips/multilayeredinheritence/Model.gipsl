package "gips.multilayeredinheritence"
import "platform:/resource/gips.multilayeredinheritencemodel/model/Multilayeredinheritencemodel.ecore"


config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

// This rule just sets the node id of a to 0
rule zeroA {
	root: Root {
		-objects->a
	}
	
	a: A {
		.idA := 0
	}
}

mapping za to zeroA;

// Forbid mapping of A with id 11
constraint with A {
	mappings.za->filter(element.nodes.a == context & context.idA == 11)->count() == 0
}

// Forbid mapping of B with id 22
constraint with B {
	mappings.za->filter(element.nodes.a == context & context.idA == 22)->count() == 0
}

// Forbid mapping of C with id 33
constraint with C {
	mappings.za->filter(element.nodes.a == context & context.idA == 33)->count() == 0
}

function oa with za {
	1
}

objective : max {
	functions.oa
}
