package "gipsl.all.build.varsbooleanbug"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
}

pattern dummyPattern {
	root : Root
}

rule setDummyAttrRoot(p: EBoolean) {
	root: Root {
		.dummyAttribute := true
	}
	// the parameter `p` must not be used for this test
}

//
// GIPSL starts here!
//

mapping n2n to mapVnode {
	var b : EBoolean
};

mapping dummyM to setDummyAttrRoot {
	var x : EBoolean bind p
};

mapping dummyPatternM to dummyPattern {
	var b : EBoolean
};

constraint with VirtualResourceNode {
	mappings.n2n->filter(element.nodes.vnode == context)->sum(element.value) == 1
}

constraint with Root {
	mappings.dummyM->filter(element.nodes.root == context)->sum(element.value) == 1
}

// Sets the respective variable `b` to `1` if the corresponding mapping has been chosen
constraint with mapVnode {
	mappings.n2n->filter(element.nodes.snode == context.nodes.snode & element.nodes.vnode == context.nodes.vnode)->sum(element.value)
	==
	mappings.n2n->filter(element.nodes.snode == context.nodes.snode & element.nodes.vnode == context.nodes.vnode)->sum(element.variables.b)
}

// Sets the respective variable `p` to `1` if the corresponding mapping has been chosen
constraint with setDummyAttrRoot {
	mappings.dummyM->filter(element.nodes.root == context.nodes.root)->sum(element.value)
	==
	mappings.dummyM->filter(element.nodes.root == context.nodes.root)->sum(element.variables.x)
}

function n2nObj with n2n {
	context.value
}

objective : max {
	functions.n2nObj
}
