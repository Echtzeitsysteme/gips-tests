package "gipsl.all.build.varnamebug"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
}

//
// GIPSL starts here!
//

mapping n2n to mapVnode {
	var n : EInt
};

// Connect the variable 'n' to the corresponding mapping variable through the pattern context
constraint with mapVnode {
	[mappings.n2n->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) >= 1
	=>
	mappings.n2n->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.variables.n) >= 1] 
	 
	&    
	
	[mappings.n2n->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.variables.n) >= 1
	=>
	mappings.n2n->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) >= 1]
}

constraint with VirtualResourceNode {
	mappings.n2n->filter(element.nodes.vnode == context)->sum(element.value) == 1
}

function o with n2n {
	context.value
}

objective : min {
	functions.o
}
