package "gipsl.all.build.objective"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 42.0];
	randomSeed := true [value := 73];
	presolve := true;
	debugOutput := false;
}

condition vnodeNotMapped = forbid vnodeIsMapped
pattern vnodeIsMapped {
	host: SubstrateNode
	
	vnode: VirtualNode {
		-host -> host
	}
}

pattern vnodeNotMapped {
	vnode: VirtualNode
}
when vnodeNotMapped

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

//
// GIPSL starts here!
//

mapping a to mapVnode;
constraint with SubstrateResourceNode {
	mappings.a->filter(element.nodes.snode == context)->sum(element.nodes.vnode.resourceDemand * element.value) <= context.resourceAmountAvailable
}
constraint with vnodeNotMapped {
	mappings.a->filter(element.nodes.vnode == context.nodes.vnode)->sum(element.value) == 1
}

function objA with a {
	context.value * (1 + 2 + sin(3) + cos(4) + abs(-5) + -(6) + 7 pow 3 + sqrt(8) + context.nodes.snode.resourceAmountTotal - 9 + 10/10)
}
function objB with Root {
	500
}

objective : min {
	2 * functions.objA + 73 + 2 * functions.objB
}
