import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

// This GIPSL project is just for scribbles and debugging, e.g, the validator.

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "TODO"];
	timeLimit := true [value := 42.0];
	randomSeed := true [value := 73];
	presolve := true;
	debugOutput := true;
}

rule mapVnode() {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode {
		++ -guests -> vnode
	}
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

mapping n2n with mapVnode;

//constraint -> class::VirtualResourceNode {
//	mappings.n2n->filter(m | true)->filter(n | n.nodes().snode == self)->notEmpty()
//}

//constraint -> class::VirtualResourceNode {
//	mappings.n2n->count() - 1 > mappings.n2n->filter(m | m.nodes().vnode == self)->count() * 4
//	2 - 1 > mappings.n2n->filter(m | m.nodes().vnode == self)->count() * 4
//	mappings.n2n->count() == self.resourceDemand
//	mappings.n2n->count() + 1 > mappings.n2n->filter(m | m.nodes().vnode == self)->count() * 4
//}

constraint -> mapping::n2n {
	self.isMapped()
}
constraint -> mapping::n2n {
	self.isMapped() & 1 < 0
}
//constraint -> mapping::n2n {
//	self.nodes().root.containers->filter(m | self.isMapped())->count() == 1
//}
//constraint -> mapping::n2n {
//	self.nodes().root.containers->notEmpty()
//}

//objective testObj -> mapping::n2n {
//	pi + e
//}
//objective testObj -> mapping::n2n {
//	2 log 3
//}
objective testObj -> mapping::n2n {
	2 log 3 + pi + e
}

global objective : min {
	1
}
