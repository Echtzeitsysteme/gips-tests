package "gipsl.all.build.function.scaling"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 10.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule mapVnodeOne {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 1
}

rule mapVnodeTwo {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 2
}

rule mapVnodeTen {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 10
}

rule mapVnodeTwenty {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 20
}

rule mapVnodeTwentyOne {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 21
}
rule mapVnodeTwentyTwo {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 22
}

rule mapVnodeThirtyThree {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 33
}

rule mapVnodeFourty {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand == 40
}

//
// GIPSL starts here!
//

mapping a to mapVnodeOne;
mapping b to mapVnodeTwo;
mapping c to mapVnodeTen;
mapping d to mapVnodeTwenty;
mapping f to mapVnodeTwentyOne;
mapping g to mapVnodeTwentyTwo;
mapping h to mapVnodeThirtyThree;
mapping i to mapVnodeFourty;

// Each found virtual node (match) must be mapped (for both mappings!)
constraint with mapVnodeOne {
	mappings.a->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value)== 1
}
constraint with mapVnodeTwo {
	mappings.b->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) == 1
}
constraint with mapVnodeTen {
	mappings.c->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) == 1
}
constraint with mapVnodeTwenty {
	mappings.d->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) == 1
}
constraint with mapVnodeTwentyOne {
	mappings.f->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) == 1
}
constraint with mapVnodeTwentyTwo {
	mappings.g->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) == 1
}
constraint with mapVnodeThirtyThree {
	mappings.h->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) == 1
}
constraint with mapVnodeFourty {
	mappings.i->filter(element.nodes.vnode == context.nodes.vnode & element.nodes.snode == context.nodes.snode)->sum(element.value) == 1
}

function objA with a {
	context.value
}

function objB with b {
	100 * context.value
}

function sumC with SubstrateResourceNode {
	mappings.c->filter(element.nodes.snode == context)->sum(element.nodes.vnode.resourceDemand * element.value) / 5
}

function sumD with SubstrateResourceNode {
	mappings.d->filter(element.nodes.snode == context)->sum(element.nodes.vnode.resourceDemand * element.value) / 0.1
}

function sumFG with SubstrateResourceNode {
	(mappings.f->filter(element.nodes.snode == context)->sum(element.value) +
	mappings.g->filter(element.nodes.snode == context)->sum(element.value))
	/ 2 
}

function sumH with SubstrateResourceNode {
	mappings.h->filter(element.nodes.snode == context)->sum(element.nodes.vnode.resourceDemand * element.value) / 3
}

function objIA with i {
	context.value * ((context.nodes.vnode.resourceDemand + 10) / 5)
}
function objIB with VirtualResourceNode {
	mappings.i->filter(element.nodes.vnode == context)->sum(element.nodes.vnode.resourceDemand * element.value)
}

objective : min {
	73 * functions.objA + (functions.objB / 5) + functions.sumC + functions.sumD + (functions.sumH / 11) + ((functions.objIA + functions.objIB) / 5) + functions.sumFG
}
