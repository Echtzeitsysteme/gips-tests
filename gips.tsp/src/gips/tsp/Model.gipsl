package "gips.tsp"
import "platform:/resource/gips.tsp.citymodel/model/Citymodel.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 60.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := false;
}

rule connect {
	root: Root {
		-cities -> ca
		-cities -> cb
	}
	
	ca: City {
		++ -next -> cb
	}
	cb: City {
		++ -prev -> ca
	}
}

pattern findCity {
	c: City
}

mapping c2c to connect;
mapping c to findCity {
	var v : EInt
};

constraint with City {
	mappings.c2c->filter(element.nodes.ca == context)->sum(element.value) == 1 &
	mappings.c2c->filter(element.nodes.cb == context)->sum(element.value) == 1
}

// TODO: Eliminate sub tours
constraint with c {
	1 <= context.variables.v
}
constraint with c {
	context.variables.v <= types.City->count() - 1
}

function city with c2c {
	// TODO: sqrt needed?
	((context.nodes.cb.x - context.nodes.ca.x) pow 2 + (context.nodes.cb.y - context.nodes.ca.y) pow 2)
	* context.value
}

objective : min {
	functions.city
}
