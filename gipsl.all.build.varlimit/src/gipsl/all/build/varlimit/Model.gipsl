package "gipsl.all.build.varlimit"
import "platform:/resource/gipsl.all.build.model/model/Model.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 42.0];
	randomSeed := true [value := 73];
	presolve := true;
	debugOutput := false;
}

condition vnodeNotMapped = forbid vnodeIsMapped
pattern vnodeIsMapped {
	host: SubstrateNode
	
	vnode: VirtualNode {
		-host -> host
	}
}

pattern vnodeNotMapped {
	vnode: VirtualNode
}
when vnodeNotMapped

rule mapVnode {
	root: Root {
		-containers -> substrateContainer
		-containers -> virtualContainer
	}
	
	substrateContainer: SubstrateContainer {
		-substrateNodes -> snode
	}
	
	virtualContainer: VirtualContainer {
		-virtualNodes -> vnode
	}
	
	snode: SubstrateResourceNode
	
	vnode: VirtualResourceNode {
		++ -host -> snode
	}
	
	# vnode.resourceDemand <= snode.resourceAmountAvailable
	# snode.resourceAmountAvailable >= 0
}

//
// GIPSL starts here!
//

mapping n2n to mapVnode;

constraint with SubstrateResourceNode {
	// RHS of the OR term is useless (logically); the RHS is never true
	// This constraint ensures that each virtual node is mapped to every substrate node possible.
	mappings.n2n->filter(element.nodes.snode == context)->count() >= patterns.vnodeNotMapped->count() | mappings.n2n->filter(element.nodes.snode != context)->count() <= -1
}

function nObj with n2n {
	1
}

objective : min {
	functions.nObj
}